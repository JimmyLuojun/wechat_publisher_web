[tool.poetry]
name = "wechat-publisher-web"
version = "0.1.0"
description = "Django app for publishing articles to WeChat"
authors = ["Jimmy <15828061015@163.com>"] # Correct format
license = "MIT" # Good to specify
readme = "README.md"
# homepage = "Optional: URL to project homepage/repo"
# repository = "Optional: URL to project repo"
# documentation = "Optional: URL to documentation"
packages = [
    # Assuming 'wechat_publisher_web' is your main Django project dir (settings.py)
    { include = "wechat_publisher_web" },
    # Assuming 'publisher' is your Django app dir
    { include = "publisher" },
    # Assuming 'publishing_engine' is LOCAL source code you want packaged
    # If it's an installable package, remove it from here and add to [dependencies]
    { include = "publishing_engine" }
]
# classifiers = [ # Optional: Add trove classifiers for PyPI
#    "Development Status :: 3 - Alpha",
#    "Environment :: Web Environment",
#    "Framework :: Django :: 4.2",
#    "Intended Audience :: Developers",
#    "License :: OSI Approved :: MIT License",
#    "Operating System :: OS Independent",
#    "Programming Language :: Python :: 3",
#    "Programming Language :: Python :: 3.10",
#    "Programming Language :: Python :: 3.11",
#    "Programming Language :: Python :: 3.12",
#    "Topic :: Internet :: WWW/HTTP",
# ]

[tool.poetry.dependencies]
python = "^3.10" # Keep this specific to your target Python versions

# Core Frameworks
django = "^4.2"
djangorestframework = "^3.14" # Or "^3.15" if available/needed

# Async Task Queue
celery = "^5.3"
redis = "^5.0" # Check compatibility with Celery version if issues arise

# HTTP Requests & Environment
requests = "^2.31"
python-dotenv = "^1.0.0"

# Content Processing
markdown = "^3.5" # Consider updating minor versions if needed
beautifulsoup4 = "^4.12"
pillow = "^11.2.1" # Updated Pillow constraint example
pyyaml = "^6.0" # Added: Was used in services.py for metadata

# Data Validation (Optional but often used with DRF/complex logic)
pydantic = "^2.0" # Keep if used, otherwise remove

# Add your 'publishing_engine' here ONLY if it's installable from PyPI/git
# publishing_engine = { git = "ssh://git@github.com/your_org/publishing_engine.git", branch = "main" }
django-storages = "^1.14.6"
google-cloud-storage = "^3.1.0"
lxml = "^5.4.0"


[tool.poetry.group.dev.dependencies]
# Testing Core
pytest = "^8.2.0" # Updated pytest constraint example
pytest-django = "^4.8.0" # Updated pytest-django constraint example
pytest-mock = "^3.12.0" # Updated pytest-mock constraint example
mixer = "^7.2.2" # For creating model instances in tests
freezegun = "^1.5.1" # Moved here from misplaced section, was already present

# Frontend/E2E Testing (Added based on previous request)
pytest-playwright = "^0.5.0" # Updated pytest-playwright constraint example
pytest-asyncio = "^0.23.0" # For async tests with Playwright

# Code Quality & Formatting
black = "^24.4.0" # Code formatter
ruff = "^0.4.0" # Linter (replaces flake8, isort, etc.)
mypy = "^1.10.0" # Optional: Static type checker
django-stubs = "^4.2.7" # Optional: Type stubs for Django (use with mypy)

# Coverage Reporting
coverage = {extras = ["toml"], version = "^7.5.0"} # Test coverage tool

# Build system - Standard, usually no need to change
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


# --- Tool Configurations (Optional but Recommended) ---

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "wechat_publisher_web.settings"
# Crucial for pytest-django
# testpaths = ["tests"] # Specify where tests are located (optional, default is auto-detect)
python_files = "tests.py test_*.py *_test.py" # Test file discovery patterns
addopts = [ # Options passed to pytest
    "-v", # Verbose output
    "--strict-markers", # Fail on unknown markers
    "--nomigrations", # Speed up tests by skipping migrations (ensure tests handle DB state)
    "--cov=.", # Enable coverage for the current directory (.)
    "--cov-report=term-missing", # Show missing lines in coverage report
    #"--cov-fail-under=80", # Optional: Fail if coverage drops below 80%
]
asyncio_mode = "auto" # Required for pytest-asyncio

[tool.coverage.run]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/virtualenvs/*",
    "*/site-packages/*",
    "manage.py",
    "publisher/apps.py",
    "publisher/admin.py", # Often excluded unless complex logic
    "wechat_publisher_web/*", # Exclude project config files
    "publishing_engine/*", # <--- Exclude this library
]

[tool.coverage.report]
fail_under = 75 # Your threshold
show_missing = true

[tool.black]
line-length = 88
target-version = ['py310', 'py311'] # Specify compatible Python versions

[tool.ruff]
line-length = 88
select = [ # Select rule codes/categories (E=pycodestyle error, F=pyflakes, W=pycodestyle warning, I=isort, etc.)
    "E", "F", "W", "I", "UP", # Common useful rules
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
    "DJ", # flake8-django
]
ignore = ["E501"] # Ignore line too long (handled by black)
target-version = "py310"
src = ["."] # Check files starting from the root

[tool.ruff.lint.isort]
known-django = ["django"]
known-first-party = ["wechat_publisher_web", "publisher", "publishing_engine"] # Help isort group imports

[tool.mypy] # Optional: Example mypy config if using it
python_version = "3.10"
plugins = ["mypy_django_plugin.main"]
ignore_missing_imports = true # Start leniently
# check_untyped_defs = true # Enable stricter checks gradually
# disallow_untyped_defs = true
# warn_return_any = true
# warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs] # Optional: Config for django-stubs plugin
django_settings_module = "wechat_publisher_web.settings"
